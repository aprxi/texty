# Rust WebRS Makefile for building native and WASM versions

.PHONY: help build build-wasm build-native test test-wasm clean install-tools export-onnx default copy-onnx run

# Default target - copy ONNX and build
default: copy-onnx build

# Copy ONNX artifacts from root artifacts directory
copy-onnx:
	@echo "üìã Copying ONNX artifacts..."
	@if [ ! -d "../../artifacts/models/onnx" ]; then \
		echo "‚ùå Error: ONNX artifacts not found at ../../artifacts/models/onnx/"; \
		echo "‚ö†Ô∏è  Please run 'make onnx' in the root of the repository first."; \
		exit 1; \
	fi
	@if [ ! -f "../../artifacts/models/onnx/base_model_classifier.onnx" ]; then \
		echo "‚ùå Error: Required ONNX model files not found."; \
		echo "‚ö†Ô∏è  Please run 'make onnx' in the root of the repository first."; \
		exit 1; \
	fi
	@mkdir -p ./build/models
	@cp -r ../../artifacts/models/onnx/* ./build/models/
	@echo "‚úÖ ONNX artifacts copied to ./build/models/"
	@echo "Files copied:"
	@ls -la ./build/models/

# Help target
help:
	@echo "Texty WebRS - Rust/WASM Text Classification"
	@echo "==========================================="
	@echo ""
	@echo "ü¶Ä BUILD TARGETS:"
	@echo "  build         - Build both native and WASM versions"
	@echo "  build-native  - Build native Rust library"
	@echo "  build-wasm    - Build WASM version for web"
	@echo ""
	@echo "üß™ TESTING:"
	@echo "  test          - Run all tests"
	@echo "  test-wasm     - Test WASM build"
	@echo ""
	@echo "üîß TOOLS:"
	@echo "  install-tools - Install required tools (wasm-pack, etc.)"
	@echo "  copy-onnx     - Copy ONNX artifacts from ../../artifacts/models/onnx/"
	@echo "  run           - Start development server (requires build first)"
	@echo ""
	@echo "üßπ CLEANUP:"
	@echo "  clean         - Clean build artifacts"

# Install required tools for WASM development
install-tools:
	@echo "üì¶ Installing required tools..."
	@if ! command -v wasm-pack >/dev/null 2>&1; then \
		echo "Installing wasm-pack..."; \
		curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh; \
	else \
		echo "‚úÖ wasm-pack already installed"; \
	fi
	@if ! command -v cargo-generate >/dev/null 2>&1; then \
		echo "Installing cargo-generate..."; \
		cargo install cargo-generate; \
	else \
		echo "‚úÖ cargo-generate already installed"; \
	fi

# Build both native and WASM versions
build: build-native build-wasm

# Build native Rust library
build-native:
	@echo "ü¶Ä Building native Rust library..."
	cargo build --release
	@echo "‚úÖ Native build complete!"

# Build WASM version
build-wasm: install-tools
	@echo "üåê Building WASM version..."
	wasm-pack build --target web --out-dir pkg --features wasm
	@echo "‚úÖ WASM build complete! Output in pkg/"

# Build for Node.js/bundler environments
build-wasm-bundler: install-tools
	@echo "üì¶ Building WASM for bundlers..."
	wasm-pack build --target bundler --out-dir pkg-bundler --features wasm

# Development build (faster compilation)
build-dev:
	@echo "üöß Building development version..."
	cargo build
	@echo "‚úÖ Development build complete!"

# Run tests
test:
	@echo "üß™ Running tests..."
	cargo test
	@echo "‚úÖ Tests complete!"

# Test WASM build
test-wasm: build-wasm
	@echo "üåê Testing WASM build..."
	wasm-pack test --headless --firefox --features wasm
	@echo "‚úÖ WASM tests complete!"

# Export ONNX model from Python
export-onnx:
	@echo "üîÑ Exporting Python model to ONNX..."
	@if [ ! -f "../../artifacts/models/base.latest.pkl" ]; then \
		echo "‚ùå No trained model found. Run 'make train' in the root directory first."; \
		exit 1; \
	fi
	@mkdir -p ../../artifacts/models/onnx
	@echo "üê≥ Running ONNX export in container..."
	cd ../.. && $(MAKE) onnx-container
	@echo "‚úÖ ONNX export complete! Files saved to ../../artifacts/models/onnx/"

# Clean build artifacts
clean:
	@echo "üßπ Cleaning build artifacts..."
	cargo clean
	rm -rf pkg pkg-bundler build
	@echo "‚úÖ Clean complete!"

# Generate documentation
docs:
	@echo "üìö Generating documentation..."
	cargo doc --no-deps --features wasm
	@echo "‚úÖ Documentation generated! Open target/doc/texty_webrs/index.html"

# Run clippy for linting
lint:
	@echo "üîç Running clippy..."
	cargo clippy --all-targets --features wasm -- -D warnings
	@echo "‚úÖ Lint complete!"

# Format code
fmt:
	@echo "üé® Formatting code..."
	cargo fmt
	@echo "‚úÖ Formatting complete!"

# Check code without building
check:
	@echo "üîç Checking code..."
	cargo check --features wasm
	@echo "‚úÖ Check complete!"

# Benchmark (if benchmark tests are added)
bench:
	@echo "‚ö° Running benchmarks..."
	cargo bench
	@echo "‚úÖ Benchmarks complete!"

# Watch for changes and rebuild
watch:
	@if ! command -v cargo-watch >/dev/null 2>&1; then \
		echo "Installing cargo-watch..."; \
		cargo install cargo-watch; \
	fi
	@echo "üëÄ Watching for changes..."
	cargo watch -x "build --features wasm"

# Run development server (serves the built WASM)
run:
	@echo "üöÄ Starting WebRS development server..."
	@if [ ! -d "./build" ]; then \
		echo "‚ùå Build directory not found. Run 'make webrs' first."; \
		exit 1; \
	fi
	@if [ ! -d "./pkg" ]; then \
		echo "‚ùå WASM package not found. Building now..."; \
		$(MAKE) build-wasm; \
	fi
	@echo "Starting simple HTTP server on port 8080..."
	@echo "Open http://localhost:8080 in your browser"
	@echo "Press Ctrl+C to stop"
	python3 -m http.server 8080 || python -m http.server 8080 || echo "Error: Python not found. Install Python to run the dev server."